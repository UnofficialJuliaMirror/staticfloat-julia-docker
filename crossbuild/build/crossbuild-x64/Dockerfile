## This file was autogenerated
# Do not edit directly; edit the .harbor files
#
# To build this docker image via `make`, run `make build-crossbuild-x64` in the `crossbuild` directory
# To build this docker image manually, run `docker build --pull -t staticfloat/julia_crossbuild:x64 .`

# Build an image that contains all of our cross compilers and all that stuff.
FROM alpine:3.6

# These are where we'll do all our work, so make them now
RUN mkdir -p /src /downloads

# We use the "download_unpack.sh" command a lot, throw it into /usr/bin
COPY download_unpack.sh /usr/bin

# We use a `tar` wrapper to insert extra command line flags on every tar command
COPY tar_wrapper.sh /usr/local/bin/tar

# Install build tools (BUILD_TOOLS are things needed during the build, but not at runtime)
ARG TEMPORARY_DEPS="gcc g++ clang fuse freetype tiff mesa linux-headers gettext-dev"
RUN apk add --update ${TEMPORARY_DEPS} curl make patch tar gawk autoconf automake python libtool git bison flex pkgconfig zip unzip gdb xz bash sudo file libintl findutils

# We want to be able to do things like "source"
SHELL ["/bin/bash", "-c"]
ENV TERM="screen-256color"

# We still need a pretty recent cmake, so just build one from scratch like usual
## Install cmake into /usr/local
ARG cmake_version=3.6.3
ARG cmake_url=https://cmake.org/files/v3.6/cmake-${cmake_version}.tar.gz

WORKDIR /src

# Unfortunately, we have to pass `-k` to `curl` because cmake.org has weird SSL
# certificates, and old versions of `curl` can't deal with it.  :(
RUN EXTRA_CURL_FLAGS="-k" download_unpack.sh "${cmake_url}"

# Build the cmake sources!
WORKDIR /src/cmake-${cmake_version}
RUN ${L32} ./configure --prefix=/usr/local
RUN ${L32} make -j4

# Install as root
USER root
RUN ${L32} make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf cmake-${cmake_version}
## Install tar
ARG patchelf_version=0.9
ARG patchelf_url=https://github.com/NixOS/patchelf/archive/${patchelf_version}.tar.gz

WORKDIR /src

# Use download_unpack to download and unpack patchelf
RUN download_unpack.sh "${patchelf_url}"

# Build the patchelf sources!
WORKDIR /src/patchelf-${patchelf_version}
RUN $L32 ./bootstrap.sh
RUN $L32 ./configure --prefix=/usr/local
RUN $L32 make -j4

# Install patchelf
USER root
RUN $L32 make install

# Now cleanup /src
WORKDIR /src
RUN rm -rf patchelf-${patchelf_version}*

# Get our bash script library ready
COPY build_crosscompiler.sh /build.sh
COPY patches /downloads/patches

# GCC uses gnuisms for sha512sum. Fix that
RUN rm /usr/bin/sha512sum
COPY fake_sha512sum.sh /usr/bin/sha512sum
RUN /bin/busybox chmod +x /usr/bin/sha512sum

# build gcc for x86_64.  Use an especially old glibc version to maximize compatibility
#ENV target="x86_64-linux-gnu"
#ENV glibc_version=2.12.2
#INCLUDE lib/linux_crosscompiler_install
#ENV glibc_version=""

# build gcc for i686.  Again use an especially old glibc version to maximize compatibility
#ENV target="i686-linux-gnu"
#ENV L32="linux32"
#ENV glibc_version=2.12.2
#INCLUDE lib/linux_crosscompiler_install
#ENV L32=""
#ENV glibc_version=""

# build for mac64
ENV target="x86_64-apple-darwin14"
RUN source /build.sh; set -e; install_osx_sdk
#RUN source /build.sh; set -e; install_libtapi
#RUN source /build.sh; set -e; install_cctools
#RUN source /build.sh; set -e; install_dsymutil
RUN source /build.sh; set -e; install_clang


# build for win64/win32
ENV target="x86_64-w64-mingw32"
RUN source /build.sh; install_binutils
RUN source /build.sh; download_gcc
RUN source /build.sh; install_gcc_bootstrap
RUN source /build.sh; install_mingw_stage1
RUN source /build.sh; install_mingw_stage2
RUN source /build.sh; install_gcc
ENV target="i686-w64-mingw32"
RUN source /build.sh; install_binutils
RUN source /build.sh; download_gcc
RUN source /build.sh; install_gcc_bootstrap
RUN source /build.sh; install_mingw_stage1
RUN source /build.sh; install_mingw_stage2
RUN source /build.sh; install_gcc

# build for arm7/arm8
ENV target="aarch64-linux-gnu"
RUN source /build.sh; set -e; install_kernel_headers
RUN source /build.sh; set -e; install_binutils
RUN source /build.sh; set -e; download_gcc
RUN source /build.sh; set -e; install_gcc_bootstrap
RUN source /build.sh; set -e; install_glibc
RUN source /build.sh; set -e; install_gcc
ENV target="arm-linux-gnueabihf"
RUN source /build.sh; set -e; install_kernel_headers
RUN source /build.sh; set -e; install_binutils
RUN source /build.sh; set -e; download_gcc
RUN source /build.sh; set -e; install_gcc_bootstrap
RUN source /build.sh; set -e; install_glibc
RUN source /build.sh; set -e; install_gcc

# build gcc for ppc64le (we need a more recent glibc here as well)
# We require at least version 2.22 for the fixes to assembler problems:
# https://sourceware.org/bugzilla/show_bug.cgi?id=18116
# We require at least version 2.24 for the fixes to memset.S:
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=843691
ENV target="powerpc64le-linux-gnu"
ENV glibc_version=2.25
RUN source /build.sh; set -e; install_kernel_headers
RUN source /build.sh; set -e; install_binutils
RUN source /build.sh; set -e; download_gcc
RUN source /build.sh; set -e; install_gcc_bootstrap
RUN source /build.sh; set -e; install_glibc
RUN source /build.sh; set -e; install_gcc
ENV glibc_version=""
ENV target=""

# We want a super binutils, so build it up
ARG binutils_configure_flags="--enable-targets=x86_64-linux-gnu,i686-linux-gnu,aarch64-linux-gnu,arm-linux-gnueabihf,powerpc64le-linux-gnu,x86_64-w64-mingw32,i686-w64-mingw32 --prefix=/opt/super_binutils"
## Install binutils
ARG binutils_version=2.29.1
ARG binutils_url=https://ftp.gnu.org/gnu/binutils/binutils-${binutils_version}.tar.xz

# Use download_unpack to download and unpack binutils and gcc
WORKDIR /src
RUN download_unpack.sh "${binutils_url}"

# Build binutils!  Because it's cheap and easy, we enable essentially every
# target under the sun for binutils
WORKDIR /src/binutils-${binutils_version}
RUN ${L32} ./configure --prefix=/usr/local \
                       ${binutils_configure_flags}
RUN ${L32} make -j4

# Install binutils
USER root
RUN ${L32} make install

# Cleanup
WORKDIR /src
RUN rm -rf binutils-${binutils_version}

# Install CMake toolchain files and patch CMake defaults
WORKDIR /
COPY cmake_toolchains /downloads/cmake_toolchains
RUN cp /downloads/cmake_toolchains/* /opt
RUN patch -p0 < /downloads/patches/cmake_install.patch

# Override normal uname with something that fakes out based on ${target}
COPY fake_uname.sh /usr/local/bin/uname
RUN chmod +x /usr/local/bin/uname

# We need to override the ld conf to search /usr/local before /usr
RUN echo "/usr/local/lib64:/usr/local/lib:/lib:/usr/local/lib:/usr/lib" > /etc/ld-musl-x86_64.path

# Cleanup downloads and build.sh
RUN rm -rf /downloads /build.sh

# Remove bootstrapping compiler toolchain but keep libstdc++ and libgcc
RUN apk del ${TEMPORARY_DEPS}
RUN apk add libstdc++ libgcc

# Use /entrypoint.sh to conditionally apply ${L32} since we can't use ARG
# values within an actual ENTRYPOINT command.  :(
RUN echo "#!/bin/bash" > /entrypoint.sh; \
    echo "${L32} \"\$@\"" >> /entrypoint.sh; \
    chmod +x /entrypoint.sh
RUN echo "nameserver 8.8.8.8" > /etc/resolv.conf; \
    echo "nameserver 8.8.4.4" >> /etc/resolv.conf; \
    echo "nameserver 4.4.4.4" >> /etc/resolv.conf

# Set default workdir
WORKDIR /workspace
ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/bash"]
